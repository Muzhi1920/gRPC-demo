// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/rec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2frec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2frec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2frec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2frec_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2frec_2eproto;
class Meta;
class MetaDefaultTypeInternal;
extern MetaDefaultTypeInternal _Meta_default_instance_;
class Video;
class VideoDefaultTypeInternal;
extern VideoDefaultTypeInternal _Video_default_instance_;
class VideoResponse;
class VideoResponseDefaultTypeInternal;
extern VideoResponseDefaultTypeInternal _VideoResponse_default_instance_;
class request;
class requestDefaultTypeInternal;
extern requestDefaultTypeInternal _request_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Meta* Arena::CreateMaybeMessage<::Meta>(Arena*);
template<> ::Video* Arena::CreateMaybeMessage<::Video>(Arena*);
template<> ::VideoResponse* Arena::CreateMaybeMessage<::VideoResponse>(Arena*);
template<> ::request* Arena::CreateMaybeMessage<::request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request) */ {
 public:
  inline request() : request(nullptr) {}
  virtual ~request();

  request(const request& from);
  request(request&& from) noexcept
    : request() {
    *this = ::std::move(from);
  }

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }
  inline request& operator=(request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const request& default_instance();

  static inline const request* internal_default_instance() {
    return reinterpret_cast<const request*>(
               &_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(request& a, request& b) {
    a.Swap(&b);
  }
  inline void Swap(request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline request* New() const final {
    return CreateMaybeMessage<request>(nullptr);
  }

  request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request";
  }
  protected:
  explicit request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2frec_2eproto);
    return ::descriptor_table_proto_2frec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAgeFieldNumber = 2,
    kGenderFieldNumber = 3,
    kPlatformFieldNumber = 4,
    kVideoNumsFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int32 age = 2;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gender = 3;
  void clear_gender();
  ::PROTOBUF_NAMESPACE_ID::int32 gender() const;
  void set_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gender() const;
  void _internal_set_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 platform = 4;
  void clear_platform();
  ::PROTOBUF_NAMESPACE_ID::int32 platform() const;
  void set_platform(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_platform() const;
  void _internal_set_platform(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 video_nums = 5;
  void clear_video_nums();
  ::PROTOBUF_NAMESPACE_ID::int32 video_nums() const;
  void set_video_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_video_nums() const;
  void _internal_set_video_nums(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int32 gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 platform_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_nums_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frec_2eproto;
};
// -------------------------------------------------------------------

class Meta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Meta) */ {
 public:
  inline Meta() : Meta(nullptr) {}
  virtual ~Meta();

  Meta(const Meta& from);
  Meta(Meta&& from) noexcept
    : Meta() {
    *this = ::std::move(from);
  }

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meta& operator=(Meta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Meta& default_instance();

  static inline const Meta* internal_default_instance() {
    return reinterpret_cast<const Meta*>(
               &_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Meta& a, Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Meta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Meta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Meta* New() const final {
    return CreateMaybeMessage<Meta>(nullptr);
  }

  Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Meta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Meta";
  }
  protected:
  explicit Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2frec_2eproto);
    return ::descriptor_table_proto_2frec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoverFieldNumber = 1,
    kTitleFieldNumber = 2,
    kUpFieldNumber = 3,
    kTagFieldNumber = 4,
  };
  // string cover = 1;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string up = 3;
  void clear_up();
  const std::string& up() const;
  void set_up(const std::string& value);
  void set_up(std::string&& value);
  void set_up(const char* value);
  void set_up(const char* value, size_t size);
  std::string* mutable_up();
  std::string* release_up();
  void set_allocated_up(std::string* up);
  private:
  const std::string& _internal_up() const;
  void _internal_set_up(const std::string& value);
  std::string* _internal_mutable_up();
  public:

  // string tag = 4;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:Meta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr up_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frec_2eproto;
};
// -------------------------------------------------------------------

class Video PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Video) */ {
 public:
  inline Video() : Video(nullptr) {}
  virtual ~Video();

  Video(const Video& from);
  Video(Video&& from) noexcept
    : Video() {
    *this = ::std::move(from);
  }

  inline Video& operator=(const Video& from) {
    CopyFrom(from);
    return *this;
  }
  inline Video& operator=(Video&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Video& default_instance();

  static inline const Video* internal_default_instance() {
    return reinterpret_cast<const Video*>(
               &_Video_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Video& a, Video& b) {
    a.Swap(&b);
  }
  inline void Swap(Video* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Video* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Video* New() const final {
    return CreateMaybeMessage<Video>(nullptr);
  }

  Video* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Video>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Video& from);
  void MergeFrom(const Video& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Video* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Video";
  }
  protected:
  explicit Video(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2frec_2eproto);
    return ::descriptor_table_proto_2frec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 2,
    kVideoIdFieldNumber = 1,
  };
  // .Meta Meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Meta& meta() const;
  ::Meta* release_meta();
  ::Meta* mutable_meta();
  void set_allocated_meta(::Meta* meta);
  private:
  const ::Meta& _internal_meta() const;
  ::Meta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Meta* meta);
  ::Meta* unsafe_arena_release_meta();

  // int64 video_id = 1;
  void clear_video_id();
  ::PROTOBUF_NAMESPACE_ID::int64 video_id() const;
  void set_video_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_video_id() const;
  void _internal_set_video_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Video)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Meta* meta_;
  ::PROTOBUF_NAMESPACE_ID::int64 video_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frec_2eproto;
};
// -------------------------------------------------------------------

class VideoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VideoResponse) */ {
 public:
  inline VideoResponse() : VideoResponse(nullptr) {}
  virtual ~VideoResponse();

  VideoResponse(const VideoResponse& from);
  VideoResponse(VideoResponse&& from) noexcept
    : VideoResponse() {
    *this = ::std::move(from);
  }

  inline VideoResponse& operator=(const VideoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoResponse& operator=(VideoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoResponse& default_instance();

  static inline const VideoResponse* internal_default_instance() {
    return reinterpret_cast<const VideoResponse*>(
               &_VideoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VideoResponse& a, VideoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoResponse* New() const final {
    return CreateMaybeMessage<VideoResponse>(nullptr);
  }

  VideoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoResponse& from);
  void MergeFrom(const VideoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VideoResponse";
  }
  protected:
  explicit VideoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2frec_2eproto);
    return ::descriptor_table_proto_2frec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecAlgoFieldNumber = 3,
    kImpressionFieldNumber = 1,
    kTimeStampFieldNumber = 2,
  };
  // repeated .Video rec_algo = 3;
  int rec_algo_size() const;
  private:
  int _internal_rec_algo_size() const;
  public:
  void clear_rec_algo();
  ::Video* mutable_rec_algo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Video >*
      mutable_rec_algo();
  private:
  const ::Video& _internal_rec_algo(int index) const;
  ::Video* _internal_add_rec_algo();
  public:
  const ::Video& rec_algo(int index) const;
  ::Video* add_rec_algo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Video >&
      rec_algo() const;

  // string impression = 1;
  void clear_impression();
  const std::string& impression() const;
  void set_impression(const std::string& value);
  void set_impression(std::string&& value);
  void set_impression(const char* value);
  void set_impression(const char* value, size_t size);
  std::string* mutable_impression();
  std::string* release_impression();
  void set_allocated_impression(std::string* impression);
  private:
  const std::string& _internal_impression() const;
  void _internal_set_impression(const std::string& value);
  std::string* _internal_mutable_impression();
  public:

  // int64 time_stamp = 2;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:VideoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Video > rec_algo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr impression_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// request

// string user_id = 1;
inline void request::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& request::user_id() const {
  // @@protoc_insertion_point(field_get:request.user_id)
  return _internal_user_id();
}
inline void request::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:request.user_id)
}
inline std::string* request::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:request.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& request::_internal_user_id() const {
  return user_id_.Get();
}
inline void request::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void request::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request.user_id)
}
inline void request::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request.user_id)
}
inline void request::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request.user_id)
}
inline std::string* request::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* request::release_user_id() {
  // @@protoc_insertion_point(field_release:request.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void request::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request.user_id)
}

// int32 age = 2;
inline void request::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::age() const {
  // @@protoc_insertion_point(field_get:request.age)
  return _internal_age();
}
inline void request::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void request::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:request.age)
}

// int32 gender = 3;
inline void request::clear_gender() {
  gender_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_gender() const {
  return gender_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::gender() const {
  // @@protoc_insertion_point(field_get:request.gender)
  return _internal_gender();
}
inline void request::_internal_set_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gender_ = value;
}
inline void request::set_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:request.gender)
}

// int32 platform = 4;
inline void request::clear_platform() {
  platform_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_platform() const {
  return platform_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::platform() const {
  // @@protoc_insertion_point(field_get:request.platform)
  return _internal_platform();
}
inline void request::_internal_set_platform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  platform_ = value;
}
inline void request::set_platform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:request.platform)
}

// int32 video_nums = 5;
inline void request::clear_video_nums() {
  video_nums_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_video_nums() const {
  return video_nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::video_nums() const {
  // @@protoc_insertion_point(field_get:request.video_nums)
  return _internal_video_nums();
}
inline void request::_internal_set_video_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  video_nums_ = value;
}
inline void request::set_video_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_video_nums(value);
  // @@protoc_insertion_point(field_set:request.video_nums)
}

// -------------------------------------------------------------------

// Meta

// string cover = 1;
inline void Meta::clear_cover() {
  cover_.ClearToEmpty();
}
inline const std::string& Meta::cover() const {
  // @@protoc_insertion_point(field_get:Meta.cover)
  return _internal_cover();
}
inline void Meta::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:Meta.cover)
}
inline std::string* Meta::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:Meta.cover)
  return _internal_mutable_cover();
}
inline const std::string& Meta::_internal_cover() const {
  return cover_.Get();
}
inline void Meta::_internal_set_cover(const std::string& value) {
  
  cover_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Meta::set_cover(std::string&& value) {
  
  cover_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Meta.cover)
}
inline void Meta::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Meta.cover)
}
inline void Meta::set_cover(const char* value,
    size_t size) {
  
  cover_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Meta.cover)
}
inline std::string* Meta::_internal_mutable_cover() {
  
  return cover_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Meta::release_cover() {
  // @@protoc_insertion_point(field_release:Meta.cover)
  return cover_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Meta::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Meta.cover)
}

// string title = 2;
inline void Meta::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& Meta::title() const {
  // @@protoc_insertion_point(field_get:Meta.title)
  return _internal_title();
}
inline void Meta::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:Meta.title)
}
inline std::string* Meta::mutable_title() {
  // @@protoc_insertion_point(field_mutable:Meta.title)
  return _internal_mutable_title();
}
inline const std::string& Meta::_internal_title() const {
  return title_.Get();
}
inline void Meta::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Meta::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Meta.title)
}
inline void Meta::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Meta.title)
}
inline void Meta::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Meta.title)
}
inline std::string* Meta::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Meta::release_title() {
  // @@protoc_insertion_point(field_release:Meta.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Meta::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Meta.title)
}

// string up = 3;
inline void Meta::clear_up() {
  up_.ClearToEmpty();
}
inline const std::string& Meta::up() const {
  // @@protoc_insertion_point(field_get:Meta.up)
  return _internal_up();
}
inline void Meta::set_up(const std::string& value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:Meta.up)
}
inline std::string* Meta::mutable_up() {
  // @@protoc_insertion_point(field_mutable:Meta.up)
  return _internal_mutable_up();
}
inline const std::string& Meta::_internal_up() const {
  return up_.Get();
}
inline void Meta::_internal_set_up(const std::string& value) {
  
  up_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Meta::set_up(std::string&& value) {
  
  up_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Meta.up)
}
inline void Meta::set_up(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  up_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Meta.up)
}
inline void Meta::set_up(const char* value,
    size_t size) {
  
  up_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Meta.up)
}
inline std::string* Meta::_internal_mutable_up() {
  
  return up_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Meta::release_up() {
  // @@protoc_insertion_point(field_release:Meta.up)
  return up_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Meta::set_allocated_up(std::string* up) {
  if (up != nullptr) {
    
  } else {
    
  }
  up_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), up,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Meta.up)
}

// string tag = 4;
inline void Meta::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& Meta::tag() const {
  // @@protoc_insertion_point(field_get:Meta.tag)
  return _internal_tag();
}
inline void Meta::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:Meta.tag)
}
inline std::string* Meta::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:Meta.tag)
  return _internal_mutable_tag();
}
inline const std::string& Meta::_internal_tag() const {
  return tag_.Get();
}
inline void Meta::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Meta::set_tag(std::string&& value) {
  
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Meta.tag)
}
inline void Meta::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Meta.tag)
}
inline void Meta::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Meta.tag)
}
inline std::string* Meta::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Meta::release_tag() {
  // @@protoc_insertion_point(field_release:Meta.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Meta::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Meta.tag)
}

// -------------------------------------------------------------------

// Video

// int64 video_id = 1;
inline void Video::clear_video_id() {
  video_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Video::_internal_video_id() const {
  return video_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Video::video_id() const {
  // @@protoc_insertion_point(field_get:Video.video_id)
  return _internal_video_id();
}
inline void Video::_internal_set_video_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  video_id_ = value;
}
inline void Video::set_video_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_video_id(value);
  // @@protoc_insertion_point(field_set:Video.video_id)
}

// .Meta Meta = 2;
inline bool Video::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool Video::has_meta() const {
  return _internal_has_meta();
}
inline void Video::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::Meta& Video::_internal_meta() const {
  const ::Meta* p = meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Meta&>(
      ::_Meta_default_instance_);
}
inline const ::Meta& Video::meta() const {
  // @@protoc_insertion_point(field_get:Video.Meta)
  return _internal_meta();
}
inline void Video::unsafe_arena_set_allocated_meta(
    ::Meta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Video.Meta)
}
inline ::Meta* Video::release_meta() {
  
  ::Meta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Meta* Video::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Video.Meta)
  
  ::Meta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::Meta* Video::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Meta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::Meta* Video::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:Video.Meta)
  return _internal_mutable_meta();
}
inline void Video::set_allocated_meta(::Meta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Video.Meta)
}

// -------------------------------------------------------------------

// VideoResponse

// string impression = 1;
inline void VideoResponse::clear_impression() {
  impression_.ClearToEmpty();
}
inline const std::string& VideoResponse::impression() const {
  // @@protoc_insertion_point(field_get:VideoResponse.impression)
  return _internal_impression();
}
inline void VideoResponse::set_impression(const std::string& value) {
  _internal_set_impression(value);
  // @@protoc_insertion_point(field_set:VideoResponse.impression)
}
inline std::string* VideoResponse::mutable_impression() {
  // @@protoc_insertion_point(field_mutable:VideoResponse.impression)
  return _internal_mutable_impression();
}
inline const std::string& VideoResponse::_internal_impression() const {
  return impression_.Get();
}
inline void VideoResponse::_internal_set_impression(const std::string& value) {
  
  impression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VideoResponse::set_impression(std::string&& value) {
  
  impression_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:VideoResponse.impression)
}
inline void VideoResponse::set_impression(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  impression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:VideoResponse.impression)
}
inline void VideoResponse::set_impression(const char* value,
    size_t size) {
  
  impression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:VideoResponse.impression)
}
inline std::string* VideoResponse::_internal_mutable_impression() {
  
  return impression_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VideoResponse::release_impression() {
  // @@protoc_insertion_point(field_release:VideoResponse.impression)
  return impression_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VideoResponse::set_allocated_impression(std::string* impression) {
  if (impression != nullptr) {
    
  } else {
    
  }
  impression_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), impression,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:VideoResponse.impression)
}

// int64 time_stamp = 2;
inline void VideoResponse::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoResponse::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VideoResponse::time_stamp() const {
  // @@protoc_insertion_point(field_get:VideoResponse.time_stamp)
  return _internal_time_stamp();
}
inline void VideoResponse::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_stamp_ = value;
}
inline void VideoResponse::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:VideoResponse.time_stamp)
}

// repeated .Video rec_algo = 3;
inline int VideoResponse::_internal_rec_algo_size() const {
  return rec_algo_.size();
}
inline int VideoResponse::rec_algo_size() const {
  return _internal_rec_algo_size();
}
inline void VideoResponse::clear_rec_algo() {
  rec_algo_.Clear();
}
inline ::Video* VideoResponse::mutable_rec_algo(int index) {
  // @@protoc_insertion_point(field_mutable:VideoResponse.rec_algo)
  return rec_algo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Video >*
VideoResponse::mutable_rec_algo() {
  // @@protoc_insertion_point(field_mutable_list:VideoResponse.rec_algo)
  return &rec_algo_;
}
inline const ::Video& VideoResponse::_internal_rec_algo(int index) const {
  return rec_algo_.Get(index);
}
inline const ::Video& VideoResponse::rec_algo(int index) const {
  // @@protoc_insertion_point(field_get:VideoResponse.rec_algo)
  return _internal_rec_algo(index);
}
inline ::Video* VideoResponse::_internal_add_rec_algo() {
  return rec_algo_.Add();
}
inline ::Video* VideoResponse::add_rec_algo() {
  // @@protoc_insertion_point(field_add:VideoResponse.rec_algo)
  return _internal_add_rec_algo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Video >&
VideoResponse::rec_algo() const {
  // @@protoc_insertion_point(field_list:VideoResponse.rec_algo)
  return rec_algo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2frec_2eproto
