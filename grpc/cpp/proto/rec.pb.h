// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/rec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2frec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2frec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2frec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2frec_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2frec_2eproto;
class Article;
class ArticleDefaultTypeInternal;
extern ArticleDefaultTypeInternal _Article_default_instance_;
class ArticleResponse;
class ArticleResponseDefaultTypeInternal;
extern ArticleResponseDefaultTypeInternal _ArticleResponse_default_instance_;
class Track;
class TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
class UserRequest;
class UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Article* Arena::CreateMaybeMessage<::Article>(Arena*);
template<> ::ArticleResponse* Arena::CreateMaybeMessage<::ArticleResponse>(Arena*);
template<> ::Track* Arena::CreateMaybeMessage<::Track>(Arena*);
template<> ::UserRequest* Arena::CreateMaybeMessage<::UserRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRequest& default_instance();

  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRequest* New() const final {
    return CreateMaybeMessage<UserRequest>(nullptr);
  }

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2frec_2eproto);
    return ::descriptor_table_proto_2frec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kArticleNumFieldNumber = 3,
    kTimeStampFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int32 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 article_num = 3;
  void clear_article_num();
  ::PROTOBUF_NAMESPACE_ID::int32 article_num() const;
  void set_article_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_article_num() const;
  void _internal_set_article_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 time_stamp = 4;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 article_num_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frec_2eproto;
};
// -------------------------------------------------------------------

class Track PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Track) */ {
 public:
  inline Track() : Track(nullptr) {}
  virtual ~Track();

  Track(const Track& from);
  Track(Track&& from) noexcept
    : Track() {
    *this = ::std::move(from);
  }

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  inline Track& operator=(Track&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Track& default_instance();

  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Track& a, Track& b) {
    a.Swap(&b);
  }
  inline void Swap(Track* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Track* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Track* New() const final {
    return CreateMaybeMessage<Track>(nullptr);
  }

  Track* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Track>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Track* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Track";
  }
  protected:
  explicit Track(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2frec_2eproto);
    return ::descriptor_table_proto_2frec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClickFieldNumber = 1,
    kCollectFieldNumber = 2,
    kShareFieldNumber = 3,
    kReadFieldNumber = 4,
  };
  // string click = 1;
  void clear_click();
  const std::string& click() const;
  void set_click(const std::string& value);
  void set_click(std::string&& value);
  void set_click(const char* value);
  void set_click(const char* value, size_t size);
  std::string* mutable_click();
  std::string* release_click();
  void set_allocated_click(std::string* click);
  private:
  const std::string& _internal_click() const;
  void _internal_set_click(const std::string& value);
  std::string* _internal_mutable_click();
  public:

  // string collect = 2;
  void clear_collect();
  const std::string& collect() const;
  void set_collect(const std::string& value);
  void set_collect(std::string&& value);
  void set_collect(const char* value);
  void set_collect(const char* value, size_t size);
  std::string* mutable_collect();
  std::string* release_collect();
  void set_allocated_collect(std::string* collect);
  private:
  const std::string& _internal_collect() const;
  void _internal_set_collect(const std::string& value);
  std::string* _internal_mutable_collect();
  public:

  // string share = 3;
  void clear_share();
  const std::string& share() const;
  void set_share(const std::string& value);
  void set_share(std::string&& value);
  void set_share(const char* value);
  void set_share(const char* value, size_t size);
  std::string* mutable_share();
  std::string* release_share();
  void set_allocated_share(std::string* share);
  private:
  const std::string& _internal_share() const;
  void _internal_set_share(const std::string& value);
  std::string* _internal_mutable_share();
  public:

  // string read = 4;
  void clear_read();
  const std::string& read() const;
  void set_read(const std::string& value);
  void set_read(std::string&& value);
  void set_read(const char* value);
  void set_read(const char* value, size_t size);
  std::string* mutable_read();
  std::string* release_read();
  void set_allocated_read(std::string* read);
  private:
  const std::string& _internal_read() const;
  void _internal_set_read(const std::string& value);
  std::string* _internal_mutable_read();
  public:

  // @@protoc_insertion_point(class_scope:Track)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr click_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr share_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr read_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frec_2eproto;
};
// -------------------------------------------------------------------

class Article PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Article) */ {
 public:
  inline Article() : Article(nullptr) {}
  virtual ~Article();

  Article(const Article& from);
  Article(Article&& from) noexcept
    : Article() {
    *this = ::std::move(from);
  }

  inline Article& operator=(const Article& from) {
    CopyFrom(from);
    return *this;
  }
  inline Article& operator=(Article&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Article& default_instance();

  static inline const Article* internal_default_instance() {
    return reinterpret_cast<const Article*>(
               &_Article_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Article& a, Article& b) {
    a.Swap(&b);
  }
  inline void Swap(Article* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Article* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Article* New() const final {
    return CreateMaybeMessage<Article>(nullptr);
  }

  Article* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Article>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Article& from);
  void MergeFrom(const Article& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Article* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Article";
  }
  protected:
  explicit Article(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2frec_2eproto);
    return ::descriptor_table_proto_2frec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackFieldNumber = 2,
    kArticleIdFieldNumber = 1,
  };
  // .Track track = 2;
  bool has_track() const;
  private:
  bool _internal_has_track() const;
  public:
  void clear_track();
  const ::Track& track() const;
  ::Track* release_track();
  ::Track* mutable_track();
  void set_allocated_track(::Track* track);
  private:
  const ::Track& _internal_track() const;
  ::Track* _internal_mutable_track();
  public:
  void unsafe_arena_set_allocated_track(
      ::Track* track);
  ::Track* unsafe_arena_release_track();

  // int64 article_id = 1;
  void clear_article_id();
  ::PROTOBUF_NAMESPACE_ID::int64 article_id() const;
  void set_article_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_article_id() const;
  void _internal_set_article_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Article)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Track* track_;
  ::PROTOBUF_NAMESPACE_ID::int64 article_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frec_2eproto;
};
// -------------------------------------------------------------------

class ArticleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArticleResponse) */ {
 public:
  inline ArticleResponse() : ArticleResponse(nullptr) {}
  virtual ~ArticleResponse();

  ArticleResponse(const ArticleResponse& from);
  ArticleResponse(ArticleResponse&& from) noexcept
    : ArticleResponse() {
    *this = ::std::move(from);
  }

  inline ArticleResponse& operator=(const ArticleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArticleResponse& operator=(ArticleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArticleResponse& default_instance();

  static inline const ArticleResponse* internal_default_instance() {
    return reinterpret_cast<const ArticleResponse*>(
               &_ArticleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ArticleResponse& a, ArticleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ArticleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArticleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArticleResponse* New() const final {
    return CreateMaybeMessage<ArticleResponse>(nullptr);
  }

  ArticleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArticleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArticleResponse& from);
  void MergeFrom(const ArticleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArticleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArticleResponse";
  }
  protected:
  explicit ArticleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2frec_2eproto);
    return ::descriptor_table_proto_2frec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecommendsFieldNumber = 3,
    kExposureFieldNumber = 1,
    kTimeStampFieldNumber = 2,
  };
  // repeated .Article recommends = 3;
  int recommends_size() const;
  private:
  int _internal_recommends_size() const;
  public:
  void clear_recommends();
  ::Article* mutable_recommends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Article >*
      mutable_recommends();
  private:
  const ::Article& _internal_recommends(int index) const;
  ::Article* _internal_add_recommends();
  public:
  const ::Article& recommends(int index) const;
  ::Article* add_recommends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Article >&
      recommends() const;

  // string exposure = 1;
  void clear_exposure();
  const std::string& exposure() const;
  void set_exposure(const std::string& value);
  void set_exposure(std::string&& value);
  void set_exposure(const char* value);
  void set_exposure(const char* value, size_t size);
  std::string* mutable_exposure();
  std::string* release_exposure();
  void set_allocated_exposure(std::string* exposure);
  private:
  const std::string& _internal_exposure() const;
  void _internal_set_exposure(const std::string& value);
  std::string* _internal_mutable_exposure();
  public:

  // int64 time_stamp = 2;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ArticleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Article > recommends_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exposure_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserRequest

// string user_id = 1;
inline void UserRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& UserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:UserRequest.user_id)
  return _internal_user_id();
}
inline void UserRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:UserRequest.user_id)
}
inline std::string* UserRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:UserRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UserRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserRequest.user_id)
}
inline void UserRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserRequest.user_id)
}
inline void UserRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserRequest.user_id)
}
inline std::string* UserRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:UserRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserRequest.user_id)
}

// int32 channel_id = 2;
inline void UserRequest::clear_channel_id() {
  channel_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:UserRequest.channel_id)
  return _internal_channel_id();
}
inline void UserRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_id_ = value;
}
inline void UserRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:UserRequest.channel_id)
}

// int32 article_num = 3;
inline void UserRequest::clear_article_num() {
  article_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRequest::_internal_article_num() const {
  return article_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserRequest::article_num() const {
  // @@protoc_insertion_point(field_get:UserRequest.article_num)
  return _internal_article_num();
}
inline void UserRequest::_internal_set_article_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  article_num_ = value;
}
inline void UserRequest::set_article_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_article_num(value);
  // @@protoc_insertion_point(field_set:UserRequest.article_num)
}

// int64 time_stamp = 4;
inline void UserRequest::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserRequest::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserRequest::time_stamp() const {
  // @@protoc_insertion_point(field_get:UserRequest.time_stamp)
  return _internal_time_stamp();
}
inline void UserRequest::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_stamp_ = value;
}
inline void UserRequest::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:UserRequest.time_stamp)
}

// -------------------------------------------------------------------

// Track

// string click = 1;
inline void Track::clear_click() {
  click_.ClearToEmpty();
}
inline const std::string& Track::click() const {
  // @@protoc_insertion_point(field_get:Track.click)
  return _internal_click();
}
inline void Track::set_click(const std::string& value) {
  _internal_set_click(value);
  // @@protoc_insertion_point(field_set:Track.click)
}
inline std::string* Track::mutable_click() {
  // @@protoc_insertion_point(field_mutable:Track.click)
  return _internal_mutable_click();
}
inline const std::string& Track::_internal_click() const {
  return click_.Get();
}
inline void Track::_internal_set_click(const std::string& value) {
  
  click_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Track::set_click(std::string&& value) {
  
  click_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Track.click)
}
inline void Track::set_click(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  click_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Track.click)
}
inline void Track::set_click(const char* value,
    size_t size) {
  
  click_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Track.click)
}
inline std::string* Track::_internal_mutable_click() {
  
  return click_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Track::release_click() {
  // @@protoc_insertion_point(field_release:Track.click)
  return click_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Track::set_allocated_click(std::string* click) {
  if (click != nullptr) {
    
  } else {
    
  }
  click_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), click,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Track.click)
}

// string collect = 2;
inline void Track::clear_collect() {
  collect_.ClearToEmpty();
}
inline const std::string& Track::collect() const {
  // @@protoc_insertion_point(field_get:Track.collect)
  return _internal_collect();
}
inline void Track::set_collect(const std::string& value) {
  _internal_set_collect(value);
  // @@protoc_insertion_point(field_set:Track.collect)
}
inline std::string* Track::mutable_collect() {
  // @@protoc_insertion_point(field_mutable:Track.collect)
  return _internal_mutable_collect();
}
inline const std::string& Track::_internal_collect() const {
  return collect_.Get();
}
inline void Track::_internal_set_collect(const std::string& value) {
  
  collect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Track::set_collect(std::string&& value) {
  
  collect_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Track.collect)
}
inline void Track::set_collect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Track.collect)
}
inline void Track::set_collect(const char* value,
    size_t size) {
  
  collect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Track.collect)
}
inline std::string* Track::_internal_mutable_collect() {
  
  return collect_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Track::release_collect() {
  // @@protoc_insertion_point(field_release:Track.collect)
  return collect_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Track::set_allocated_collect(std::string* collect) {
  if (collect != nullptr) {
    
  } else {
    
  }
  collect_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collect,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Track.collect)
}

// string share = 3;
inline void Track::clear_share() {
  share_.ClearToEmpty();
}
inline const std::string& Track::share() const {
  // @@protoc_insertion_point(field_get:Track.share)
  return _internal_share();
}
inline void Track::set_share(const std::string& value) {
  _internal_set_share(value);
  // @@protoc_insertion_point(field_set:Track.share)
}
inline std::string* Track::mutable_share() {
  // @@protoc_insertion_point(field_mutable:Track.share)
  return _internal_mutable_share();
}
inline const std::string& Track::_internal_share() const {
  return share_.Get();
}
inline void Track::_internal_set_share(const std::string& value) {
  
  share_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Track::set_share(std::string&& value) {
  
  share_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Track.share)
}
inline void Track::set_share(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  share_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Track.share)
}
inline void Track::set_share(const char* value,
    size_t size) {
  
  share_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Track.share)
}
inline std::string* Track::_internal_mutable_share() {
  
  return share_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Track::release_share() {
  // @@protoc_insertion_point(field_release:Track.share)
  return share_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Track::set_allocated_share(std::string* share) {
  if (share != nullptr) {
    
  } else {
    
  }
  share_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), share,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Track.share)
}

// string read = 4;
inline void Track::clear_read() {
  read_.ClearToEmpty();
}
inline const std::string& Track::read() const {
  // @@protoc_insertion_point(field_get:Track.read)
  return _internal_read();
}
inline void Track::set_read(const std::string& value) {
  _internal_set_read(value);
  // @@protoc_insertion_point(field_set:Track.read)
}
inline std::string* Track::mutable_read() {
  // @@protoc_insertion_point(field_mutable:Track.read)
  return _internal_mutable_read();
}
inline const std::string& Track::_internal_read() const {
  return read_.Get();
}
inline void Track::_internal_set_read(const std::string& value) {
  
  read_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Track::set_read(std::string&& value) {
  
  read_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Track.read)
}
inline void Track::set_read(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  read_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Track.read)
}
inline void Track::set_read(const char* value,
    size_t size) {
  
  read_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Track.read)
}
inline std::string* Track::_internal_mutable_read() {
  
  return read_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Track::release_read() {
  // @@protoc_insertion_point(field_release:Track.read)
  return read_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Track::set_allocated_read(std::string* read) {
  if (read != nullptr) {
    
  } else {
    
  }
  read_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), read,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Track.read)
}

// -------------------------------------------------------------------

// Article

// int64 article_id = 1;
inline void Article::clear_article_id() {
  article_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Article::_internal_article_id() const {
  return article_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Article::article_id() const {
  // @@protoc_insertion_point(field_get:Article.article_id)
  return _internal_article_id();
}
inline void Article::_internal_set_article_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  article_id_ = value;
}
inline void Article::set_article_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_article_id(value);
  // @@protoc_insertion_point(field_set:Article.article_id)
}

// .Track track = 2;
inline bool Article::_internal_has_track() const {
  return this != internal_default_instance() && track_ != nullptr;
}
inline bool Article::has_track() const {
  return _internal_has_track();
}
inline void Article::clear_track() {
  if (GetArena() == nullptr && track_ != nullptr) {
    delete track_;
  }
  track_ = nullptr;
}
inline const ::Track& Article::_internal_track() const {
  const ::Track* p = track_;
  return p != nullptr ? *p : reinterpret_cast<const ::Track&>(
      ::_Track_default_instance_);
}
inline const ::Track& Article::track() const {
  // @@protoc_insertion_point(field_get:Article.track)
  return _internal_track();
}
inline void Article::unsafe_arena_set_allocated_track(
    ::Track* track) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_);
  }
  track_ = track;
  if (track) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Article.track)
}
inline ::Track* Article::release_track() {
  
  ::Track* temp = track_;
  track_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Track* Article::unsafe_arena_release_track() {
  // @@protoc_insertion_point(field_release:Article.track)
  
  ::Track* temp = track_;
  track_ = nullptr;
  return temp;
}
inline ::Track* Article::_internal_mutable_track() {
  
  if (track_ == nullptr) {
    auto* p = CreateMaybeMessage<::Track>(GetArena());
    track_ = p;
  }
  return track_;
}
inline ::Track* Article::mutable_track() {
  // @@protoc_insertion_point(field_mutable:Article.track)
  return _internal_mutable_track();
}
inline void Article::set_allocated_track(::Track* track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete track_;
  }
  if (track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(track);
    if (message_arena != submessage_arena) {
      track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track, submessage_arena);
    }
    
  } else {
    
  }
  track_ = track;
  // @@protoc_insertion_point(field_set_allocated:Article.track)
}

// -------------------------------------------------------------------

// ArticleResponse

// string exposure = 1;
inline void ArticleResponse::clear_exposure() {
  exposure_.ClearToEmpty();
}
inline const std::string& ArticleResponse::exposure() const {
  // @@protoc_insertion_point(field_get:ArticleResponse.exposure)
  return _internal_exposure();
}
inline void ArticleResponse::set_exposure(const std::string& value) {
  _internal_set_exposure(value);
  // @@protoc_insertion_point(field_set:ArticleResponse.exposure)
}
inline std::string* ArticleResponse::mutable_exposure() {
  // @@protoc_insertion_point(field_mutable:ArticleResponse.exposure)
  return _internal_mutable_exposure();
}
inline const std::string& ArticleResponse::_internal_exposure() const {
  return exposure_.Get();
}
inline void ArticleResponse::_internal_set_exposure(const std::string& value) {
  
  exposure_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArticleResponse::set_exposure(std::string&& value) {
  
  exposure_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ArticleResponse.exposure)
}
inline void ArticleResponse::set_exposure(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exposure_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ArticleResponse.exposure)
}
inline void ArticleResponse::set_exposure(const char* value,
    size_t size) {
  
  exposure_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ArticleResponse.exposure)
}
inline std::string* ArticleResponse::_internal_mutable_exposure() {
  
  return exposure_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArticleResponse::release_exposure() {
  // @@protoc_insertion_point(field_release:ArticleResponse.exposure)
  return exposure_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArticleResponse::set_allocated_exposure(std::string* exposure) {
  if (exposure != nullptr) {
    
  } else {
    
  }
  exposure_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exposure,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ArticleResponse.exposure)
}

// int64 time_stamp = 2;
inline void ArticleResponse::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ArticleResponse::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ArticleResponse::time_stamp() const {
  // @@protoc_insertion_point(field_get:ArticleResponse.time_stamp)
  return _internal_time_stamp();
}
inline void ArticleResponse::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_stamp_ = value;
}
inline void ArticleResponse::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:ArticleResponse.time_stamp)
}

// repeated .Article recommends = 3;
inline int ArticleResponse::_internal_recommends_size() const {
  return recommends_.size();
}
inline int ArticleResponse::recommends_size() const {
  return _internal_recommends_size();
}
inline void ArticleResponse::clear_recommends() {
  recommends_.Clear();
}
inline ::Article* ArticleResponse::mutable_recommends(int index) {
  // @@protoc_insertion_point(field_mutable:ArticleResponse.recommends)
  return recommends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Article >*
ArticleResponse::mutable_recommends() {
  // @@protoc_insertion_point(field_mutable_list:ArticleResponse.recommends)
  return &recommends_;
}
inline const ::Article& ArticleResponse::_internal_recommends(int index) const {
  return recommends_.Get(index);
}
inline const ::Article& ArticleResponse::recommends(int index) const {
  // @@protoc_insertion_point(field_get:ArticleResponse.recommends)
  return _internal_recommends(index);
}
inline ::Article* ArticleResponse::_internal_add_recommends() {
  return recommends_.Add();
}
inline ::Article* ArticleResponse::add_recommends() {
  // @@protoc_insertion_point(field_add:ArticleResponse.recommends)
  return _internal_add_recommends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Article >&
ArticleResponse::recommends() const {
  // @@protoc_insertion_point(field_list:ArticleResponse.recommends)
  return recommends_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2frec_2eproto
